package slaynash.test.pyjava.udp;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;

public class Main {
	
	public final static int port = 5005;
	
	public static void main(String[] args){
		
		Thread t = new Thread(new Runnable(){
			public void run(){
				try (DatagramSocket server = new DatagramSocket(port)) //Création de la connexion côté serveur, en spécifiant un port d'écoute
				{
					
					while(true){
						
						byte[] buffer = new byte[1024];
						DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
						
						server.receive(packet); //bloque le thread en attendant de récupérer le datagramme envoyé par le client
						println("received packet length: "+packet.getLength());
						
						byte[] data = new byte[packet.getLength()];												//Suppression des Bytes nuls en passant les Bytes bons dans une nouvelle liste
						System.arraycopy(packet.getData(), packet.getOffset(), data, 0, packet.getLength());	//
						
						//nous récupérons le contenu de celui-ci et nous l'affichons
						String str = new String(data); //OLD: String str = new String(packet.getData());
						print("Reçu de la part de " + packet.getAddress() + " sur le port " + packet.getPort() + " : ");
						println(str);
						
						//On réinitialise la taille du datagramme, pour les futures réceptions
						packet.setLength(buffer.length);
						
						//et nous allons répondre à notre client, donc même principe
						byte[] buffer2 = new String("Réponse du serveur à " + str + "! ").getBytes("utf-8");
						DatagramPacket packet2 = new DatagramPacket(
								buffer2,             //Les données 
								buffer2.length,      //La taille des données
								packet.getAddress(), //L'adresse de l'émetteur
								packet.getPort()     //Le port de l'émetteur
								);
						println("packet length: "+packet2.getLength());
						//Et on envoie vers l'émetteur du datagramme reçu précédemment
						server.send(packet2);
						packet2.setLength(buffer2.length);
						
					}
				}
				catch (SocketException e) {e.printStackTrace();}
				catch (IOException e) {e.printStackTrace();}
			}
		});  
		
		//Lancement du serveur
		t.start();
		
	}
	
	public static synchronized void print(String str){
		System.out.print(str);
	}
	public static synchronized void println(String str){
		System.err.println(str);
	}
}